/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package dev.android.playground.nova.usage

import dev.android.playground.nova.appcompat.manual.appCompatThemeManual
import dev.android.playground.nova.core.base.attr
import dev.android.playground.nova.core.base.color
import dev.android.playground.nova.core.base.parentCondition

fun goForIt() {

    appCompatThemeManual(name = "MyMainTheme", parent = "Theme.AppCompat.Light") {
        // Simple boolean attribute
        windowDrawsSystemBarBackgrounds = true

        // Boolean attribute with conditional values. The output will assign an autogenerated
        // @bool resource name as the value for this attribute, along with adding <bool>
        // resources in the matching values.xml (in -sw600dp and default)
        windowActionModeOverlay {
            baseline use true
            smallestWidth(600) use false
        }

        // Simple string attribute
        statusBarColor = color.status_bar_overlay
        // String attribute whose value comes from another theme attribute
        actionMenuTextColor = attr.action_menu_text

        // Inline widget style. The output will create a separate <style> entry with an
        // autogenerated name and correct parent name based on what is defined in the base
        // theme for this widget style
        actionModeStyle {
            background = color.action_mode_background
        }
    }

    // This theme extends another app theme overriding one top-level attribute and another
    // attribute in one of the inline widget styles. The output will create a separate
    // <style> entry with autogenerated name and parent name that points to the autogenerated
    // name for the parent's actionModeStyle
    appCompatThemeManual(name = "MyMainTheme.Red", parent = "MyMainTheme") {
        // Conditional string attribute that overrides the value in the parent
        statusBarColor {
            baseline use color.status_bar_overlay_red
            smallestWidth(600) use color.status_bar_overlay_red_wide
        }

        // Inline widget style that overrides the value in the parent
        actionModeStyle {
            background = color.action_mode_background_red
        }
    }

    appCompatThemeManual(name = "MyMainTheme.NoActionMode", parent = "MyMainTheme") {
        actionModeStyle = null
    }

    // This theme uses a conditional parent. The output will have two base themes with
    // identical auto-generated name, one in -night and one in default themes.xml. In
    // addition, the default themes.xml will have an additional MyDayNightTheme that
    // extends that base theme (which has two "implementations")
    appCompatThemeManual(name = "MyDayNightTheme",
            parent = parentCondition {
                baseline use "Theme.AppCompat.Light"
                night use "Theme.AppCompat"
            }) {

        windowDrawsSystemBarBackgrounds = true

        actionMenuTextColor {
            baseline use color.action_menu_text_dark
            night use color.action_menu_text_light
        }

        // Inline widget style. The output will create the following <style> entries:
        // 1. For the main theme, pointing to the @style with auto-generated name. This style
        //    will have the background item / attribute defined in it. The parent for this style
        //    will have auto-generated name that will have N parent-specific entries.
        // 2. For each one of the N parent themes, a <style> entry will be created in the
        //    matching values-QUALIFIER(S) folder. Each such style will serve as the parent for the
        //    style in the style detailed above. Each such style will have its parent determined
        //    based on what the parent theme extends from.
        actionModeStyle {
            background = color.action_mode_background_blue
        }
    }

//    theme(name="Theme.AppCompat.Light",
//          parent=parentCondition {
//                version(26) { + "Base.V26.Theme.AppCompat.Light"}
//                version(23) { + "Base.V23.Theme.AppCompat.Light"}
//                version(22) { + "Base.V22.Theme.AppCompat.Light"}
//                version(21) { + "Base.V21.Theme.AppCompat.Light"}
//                default { + "Base.V7.Theme.AppCompat"}
//          }) {
//    }
//
//    theme(name="Base.V7.Theme.AppCompat",
//            parent=parentCondition {
//                version(21) { + "android:Theme.Material.NoActionBar"}
//                version(11) { + "android:Theme.Holo"}
//                default { + "android:Theme"}
//            }) {
//    }
//
//    theme(name="Base.V21.Theme.AppCompat", parent="Base.V7.Theme.AppCompat", target=21) {
//        platformOverride(name="android:textColorLink", value="?android:attr/colorAccent")
//        platformOverride(name="android:textColorLinkInverse", value="?android:attr/colorAccent")
//        platformOverride(name="android:textColorHint", value="@color/abc_hint_foreground_material_dark")
//        platformOverride(name="android:textColorHintInverse", value="@color/abc_hint_foreground_material_light")
//        platformOverride(name="android:buttonBarStyle", value="?attr/buttonBarStyle")
//        platformOverride(name="android:buttonBarButtonStyle", value="?attr/buttonBarButtonStyle")
//    }
//
//    theme(name="Base.V22.Theme.AppCompat", parent="Base.V21.Theme.AppCompat", target=22) {
//        actionModeShareDrawable { + "?android:attr/actionModeShareDrawable"}
//        editTextBackground { + "?android:attr/editTextBackground"}
//    }
}
